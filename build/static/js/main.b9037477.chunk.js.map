{"version":3,"sources":["AddPost/AddPost.js","Card/Card.js","CardList/CardList.js","App.js","serviceWorker.js","index.js"],"names":["AddPost","state","title","postContent","toHome","handleSubmit","event","preventDefault","props","onSubmit","setState","this","to","className","type","placeholder","value","onChange","target","required","React","Component","Card","CardList","posts","map","post","App","addNewPost","postData","prevState","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mPA8CeA,E,4MA1CXC,MAAQ,CACJC,MAAO,GACPC,YAAa,GACbC,QAAQ,G,EAGZC,aAAe,SAACC,GACZA,EAAMC,iBACN,EAAKC,MAAMC,SAAS,CAACP,MAAO,EAAKD,MAAMC,MAAOC,YAAa,EAAKF,MAAME,cACtE,EAAKO,UAAS,iBAAO,CAACN,QAAQ,O,uDAGxB,IAAD,OACL,OAA0B,IAAtBO,KAAKV,MAAMG,OACJ,kBAAC,IAAD,CAAUQ,GAAG,MAIpB,0BAAMC,UAAU,+BACVJ,SAAUE,KAAKN,cACjB,2BAAOS,KAAK,OACLC,YAAY,QACZF,UAAU,yBACVG,MAAOL,KAAKV,MAAMC,MAClBe,SAAU,SAAAX,GAAK,OAAI,EAAKI,SAAS,CAACR,MAAOI,EAAMY,OAAOF,SACtDG,UAAQ,IACR,6BACP,8BACIJ,YAAY,UACZF,UAAU,2BACVG,MAAOL,KAAKV,MAAME,YAClBc,SAAU,SAAAX,GAAK,OAAI,EAAKI,SAAS,CAACP,YAAaG,EAAMY,OAAOF,SAC5DG,UAAQ,IACR,6BACJ,4BAAQN,UAAU,yBAAlB,iB,GAnCMO,IAAMC,WCYbC,E,uKAXP,OACI,yBAAKT,UAAU,wBACX,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,oBAAoBF,KAAKH,MAAMN,OAC9C,yBAAKW,UAAU,qBAAqBF,KAAKH,MAAML,mB,GANhDiB,IAAMC,W,QCkBVE,E,uKAdP,OACI,oCACI,4BAAQV,UAAU,yBACd,kBAAC,IAAD,CAAMD,GAAG,YAAT,aAGJ,yBAAKC,UAAU,cACVF,KAAKH,MAAMgB,MAAMC,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAASA,Y,GATrCN,IAAMC,WC8BdM,E,4MA5BX1B,MAAQ,CACJuB,MAAO,I,EAGXI,WAAa,SAACC,GACV,EAAKnB,UAAS,SAAAoB,GAAS,MAAK,CACxBN,MAAM,GAAD,mBAAMM,EAAUN,OAAhB,CAAuBK,S,uDAKhC,OACI,kBAAC,IAAD,KACI,yBAAKhB,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOkB,KAAK,YACR,kBAAC,EAAD,CAAStB,SAAUE,KAAKiB,cAE5B,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,GACjB,kBAAC,EAAD,CAAUR,MAAOb,KAAKV,MAAMuB,gB,GApBtCJ,IAAMC,WCOJY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9037477.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {Redirect} from \"react-router\";\r\n\r\nclass AddPost extends React.Component {\r\n    state = {\r\n        title: '',\r\n        postContent: '',\r\n        toHome: false\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit({title: this.state.title, postContent: this.state.postContent});\r\n        this.setState(() => ({toHome: true}));\r\n    };\r\n\r\n    render() {\r\n        if (this.state.toHome === true) {\r\n            return <Redirect to=\"/\" />\r\n        }\r\n\r\n        return (\r\n            <form className=\"addPost jumbotron form-group\"\r\n                  onSubmit={this.handleSubmit}>\r\n                <input type=\"text\"\r\n                       placeholder=\"title\"\r\n                       className=\"form-control blogTitle\"\r\n                       value={this.state.title}\r\n                       onChange={event => this.setState({title: event.target.value})}\r\n                       required />\r\n                       <br/>\r\n                <textarea\r\n                    placeholder=\"Content\"\r\n                    className=\"form-control blogContent\"\r\n                    value={this.state.postContent}\r\n                    onChange={event => this.setState({postContent: event.target.value})}\r\n                    required />\r\n                    <br/>\r\n                <button className=\"btn btn-light addPost\">\r\n                    Add Post\r\n                </button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddPost;","import React from \"react\";\r\n\r\nclass Card extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"card list-group-item\">\r\n                <div className=\"Card card-body\">\r\n                    <div className=\"title card-title\">{this.props.title}</div>\r\n                    <div className=\"article card-text\">{this.props.postContent}</div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card","import React from \"react\";\r\nimport Card from \"../Card/Card\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass CardList extends React.Component {\r\n    render() {\r\n        return (\r\n            <>\r\n                <button className=\"btn btn-light addPost\">\r\n                    <Link to='/addPost'>Add Post</Link>\r\n                </button>\r\n\r\n                <div className=\"list-group\">\r\n                    {this.props.posts.map(post => <Card {...post} />)}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardList;","import React from 'react';\nimport AddPost from \"./AddPost/AddPost\";\nimport CardList from \"./CardList/CardList\";\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nclass App extends React.Component {\n    state = {\n        posts: []\n    };\n\n    addNewPost = (postData) => {\n        this.setState(prevState => ({\n            posts: [...prevState.posts, postData]\n        }));\n    };\n\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <Switch>\n                        <Route path='/addPost'>\n                            <AddPost onSubmit={this.addNewPost} />\n                        </Route>\n                        <Route path=\"/\" exact>\n                            <CardList posts={this.state.posts} />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}